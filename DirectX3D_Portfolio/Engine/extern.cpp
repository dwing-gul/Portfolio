#include "pch.h"
#include "extern.h"

D3D11_INPUT_ELEMENT_DESC g_LayoutDesc[28] =
{
	D3D11_INPUT_ELEMENT_DESC
	{
		"POSITION",
		0,
		DXGI_FORMAT_R32G32B32_FLOAT,
		0,
		0,
		D3D11_INPUT_PER_VERTEX_DATA,
		0
	},

	D3D11_INPUT_ELEMENT_DESC
	{
		"TEXCOORD",
		0,
		DXGI_FORMAT_R32G32_FLOAT,
		0,
		12,
		D3D11_INPUT_PER_VERTEX_DATA,
		0
	},

	D3D11_INPUT_ELEMENT_DESC
	{
		"TANGENT",
		0,
		DXGI_FORMAT_R32G32B32_FLOAT,
		0,
		20,
		D3D11_INPUT_PER_VERTEX_DATA,
		0
	},

	D3D11_INPUT_ELEMENT_DESC
	{
		"NORMAL",
		0,
		DXGI_FORMAT_R32G32B32_FLOAT,
		0,
		32,
		D3D11_INPUT_PER_VERTEX_DATA,
		0
	},

	D3D11_INPUT_ELEMENT_DESC
	{
		"BINORMAL",
		0,
		DXGI_FORMAT_R32G32B32_FLOAT,
		0,
		44,
		D3D11_INPUT_PER_VERTEX_DATA,
		0
	},

	D3D11_INPUT_ELEMENT_DESC
	{
		"BLENDWEIGHT",
		0,
		DXGI_FORMAT_R32G32B32A32_FLOAT,
		0,
		56,
		D3D11_INPUT_PER_VERTEX_DATA,
		0
	},

	D3D11_INPUT_ELEMENT_DESC
	{
		"BLENDINDICES",
		0,
		DXGI_FORMAT_R32G32B32A32_FLOAT,
		0,
		72,
		D3D11_INPUT_PER_VERTEX_DATA,
		0
	},

	// Instancing Data
	D3D11_INPUT_ELEMENT_DESC{
		"WORLD", 0,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		0,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WORLD", 1,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		16,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WORLD", 2,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		32,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WORLD", 3,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		48,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WV", 0,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		64,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WV", 1,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		80,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WV", 2,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		96,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WV", 3,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		112,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WVP", 0,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		128,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WVP", 1,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		144,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WVP", 2,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		160,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"WVP", 3,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		176,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},


	D3D11_INPUT_ELEMENT_DESC{
		"VP", 0,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		192,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"VP", 1,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		208,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"VP", 2,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		224,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"VP", 3,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		240,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"V", 0,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		256,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"V", 1,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		272,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"V", 2,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		288,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"V", 3,
		DXGI_FORMAT_R32G32B32A32_FLOAT, 1,
		304,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},

	D3D11_INPUT_ELEMENT_DESC{
		"ROWINDEX", 0,
		DXGI_FORMAT_R32_UINT, 1,
		320,
		D3D11_INPUT_PER_INSTANCE_DATA, 1
	},
};

const char* ComponentTypeString[(UINT)COMPONENT_TYPE::END] =
{
	"Transform",
	"BoundingBox",
	"Collider2D",
	"Collider3D",
	"Animator2D",
	"Animator3D",
	"Light2D",
	"Light3D",
	"Camera",
	"Listener",
	"NaviMesh",
	"MeshRender",
	"Terrain",
	"TileMap",
	"Particle"
};

const char* ResourceTypeString[(UINT)RESOURCE_TYPE::END] =
{
	"MeshData",
	"Prefab",
	"Material",
	"Graphics",
	"Compute",
	"Mesh",
	"Texture",
	"Sound"
};

const char* ProjectionTypeString[(UINT)PROJECTION_TYPE::END] =
{
	"Perspective",
	"Orthographic"
};

const char* LightTypeString[(UINT)LIGHT_TYPE::END] =
{
	"Dir",
	"Point",
	"Spot"
};

const char* TerrainModeString[(UINT)TERRAIN_MODE::END] =
{
	"Height Map(Up)",
	"Height Map(Down)",
	"Height Map(Flattening)",
	"Splat",
	"None",
};

const char* ObjectTypeString[(UINT)OBJECT_TYPE::END] =
{
	"General",
	"Player",
	"Monster",
	"Camera",
	"Interaction",
	"Light",
	"NaviMesh",
	"UI",
};

tTransform g_transform = {};
tGlobalConst g_global = {};

const Vec3 Vec3::Right = Vec3(1.f, 0.f, 0.f);
const Vec3 Vec3::Up = Vec3(0.f, 1.f, 0.f);
const Vec3 Vec3::Front = Vec3(0.f, 0.f, 1.f);